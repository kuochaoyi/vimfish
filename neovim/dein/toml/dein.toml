# Required:
[[plugins]]
repo = 'Shougo/dein.vim'


# color scheme 'molokai'
# $ln -s ~/.cache/dein/repos/github.com/fatih/molokai/colors/molokai.vim colors/molokai.vim
[[plugins]]
repo = 'fatih/molokai'
hook_add = '''
    "set t_Co=256               " 去掉 这蛋疼的古代颜色支持方案
    colorscheme molokai
    let g:rehash256 = 1
    let g:molokai_original = 1
'''


[[plugins]]
repo = 'fatih/vim-go'
hook_add = '''
    " let g:go_fmt_command = "goimports"
    let g:go_def_mapping_enabled = 0
    let g:go_doc_keywordprg_enabled = 0

    """""""""""""""""""""
    "      Plugins      "
    """""""""""""""""""""

    " vim-go
    let g:go_fmt_command = "goimports"
    let g:go_autodetect_gopath = 1
    let g:go_list_type = "quickfix"

    let g:go_highlight_types = 1
    let g:go_highlight_fields = 1
    let g:go_highlight_functions = 1
    let g:go_highlight_function_calls = 1
    let g:go_highlight_extra_types = 1
    let g:go_highlight_generate_tags = 1

    " Open :GoDeclsDir with ctrl-g
    nmap <C-g> :GoDeclsDir<cr>
    imap <C-g> <esc>:<C-u>GoDeclsDir<cr>


    augroup go
    autocmd!

    " Show by default 4 spaces for a tab
    autocmd BufNewFile,BufRead *.go setlocal noexpandtab tabstop=4 shiftwidth=4

    " :GoBuild and :GoTestCompile
    autocmd FileType go nmap <leader>b :<C-u>call <SID>build_go_files()<CR>

    " :GoTest
    autocmd FileType go nmap <leader>t  <Plug>(go-test)

    " :GoRun
    autocmd FileType go nmap <leader>r  <Plug>(go-run)

    " :GoDoc
    autocmd FileType go nmap <Leader>d <Plug>(go-doc)

    " :GoCoverageToggle
    autocmd FileType go nmap <Leader>c <Plug>(go-coverage-toggle)

    " :GoInfo
    autocmd FileType go nmap <Leader>i <Plug>(go-info)

    " :GoMetaLinter
    autocmd FileType go nmap <Leader>l <Plug>(go-metalinter)

    " :GoDef but opens in a vertical split
    autocmd FileType go nmap <Leader>v <Plug>(go-def-vertical)
    " :GoDef but opens in a horizontal split
    autocmd FileType go nmap <Leader>s <Plug>(go-def-split)

    " :GoAlternate  commands :A, :AV, :AS and :AT
    autocmd Filetype go command! -bang A call go#alternate#Switch(<bang>0, 'edit')
    autocmd Filetype go command! -bang AV call go#alternate#Switch(<bang>0, 'vsplit')
    autocmd Filetype go command! -bang AS call go#alternate#Switch(<bang>0, 'split')
    autocmd Filetype go command! -bang AT call go#alternate#Switch(<bang>0, 'tabe')
    augroup END

    " build_go_files is a custom function that builds or compiles the test file.
    " It calls :GoBuild if its a Go file, or :GoTestCompile if it's a test file
    function! s:build_go_files()
    let l:file = expand('%')
    if l:file =~# '^\f\+_test\.go$'
        call go#test#Test(0, 1)
    elseif l:file =~# '^\f\+\.go$'
        call go#cmd#Build(0)
    endif
    endfunction
'''


[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_event = 'InsertEnter'
hook_add = '''
    let g:deoplete#enable_at_startup = 1
'''

# $go get -u golang.org/x/tools/cmd/golsp
# cd /go/src/golang.org/x/tools/cmd/golsp
[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
rev = 'next'
build = 'bash install.sh'
hook_add = '''
    set hidden                      " Buffer should still exist if window is closed

    let g:LanguageClient_serverCommands = {
        \ 'go': ['golsp']
        \ }

    let g:LanguageClient_loadSettings = 1

    "nnoremap <F5> :call LanguageClient_contextMenu()<CR>
    " Or map each action separately
    nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
    nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
    "nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>

    " Always draw sign column. Prevent buffer moving when adding/deleting sign.
    set signcolumn=yes

    " let g:LanguageClient_loggingLevel = 'INFO'
    " let g:LanguageClient_loggingFile =  expand('~/.local/share/nvim/LanguageClient.log')
    " let g:LanguageClient_serverStderr = expand('~/.local/share/nvim/LanguageServer.log')

    " golsp
    set runtimepath+=~/.cache/dein/repos/github.com/autozimu/LanguageClient-neovim
'''